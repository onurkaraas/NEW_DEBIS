{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\onurk\\\\Desktop\\\\NEW_DEBIS\\\\node_modules\\\\react-native-pdf\\\\DoubleTapView.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport PropTypes from 'prop-types';\n\nvar DoubleTapView = function (_Component) {\n  _inherits(DoubleTapView, _Component);\n\n  var _super = _createSuper(DoubleTapView);\n\n  function DoubleTapView() {\n    var _this;\n\n    _classCallCheck(this, DoubleTapView);\n\n    _this = _super.call(this);\n\n    _this.distance = function (x0, y0, x1, y1) {\n      return Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2)).toFixed(1);\n    };\n\n    _this.isDoubleTap = function (currentTouchTimeStamp, _ref) {\n      var x0 = _ref.x0,\n          y0 = _ref.y0;\n      var _this$prevTouchInfo = _this.prevTouchInfo,\n          prevTouchX = _this$prevTouchInfo.prevTouchX,\n          prevTouchY = _this$prevTouchInfo.prevTouchY,\n          prevTouchTimeStamp = _this$prevTouchInfo.prevTouchTimeStamp;\n      var dt = currentTouchTimeStamp - prevTouchTimeStamp;\n      var _this$props = _this.props,\n          delay = _this$props.delay,\n          radius = _this$props.radius;\n      return prevTouchTimeStamp > 0 && dt < delay && _this.distance(prevTouchX, prevTouchY, x0, y0) < radius;\n    };\n\n    _this.handlePanResponderRelease = function (evt, gestureState) {\n      var currentTouchTimeStamp = Date.now();\n      var x = evt.nativeEvent.locationX;\n      var y = evt.nativeEvent.locationY;\n\n      if (_this.timer) {\n        if (_this.isDoubleTap(currentTouchTimeStamp, gestureState)) {\n          clearTimeout(_this.timer);\n          _this.timer = null;\n\n          _this.props.onDoubleTap();\n        } else {\n          var _this$prevTouchInfo2 = _this.prevTouchInfo,\n              prevTouchX = _this$prevTouchInfo2.prevTouchX,\n              prevTouchY = _this$prevTouchInfo2.prevTouchY,\n              prevTouchTimeStamp = _this$prevTouchInfo2.prevTouchTimeStamp;\n          var radius = _this.props.radius;\n\n          if (_this.distance(prevTouchX, prevTouchY, gestureState.x0, gestureState.y0) < radius) {\n            _this.timer = null;\n\n            _this.props.onSingleTap(x, y);\n          }\n        }\n      } else {\n        if (_this.distance(0, gestureState.dx, 0, gestureState.dy) < 10) {\n          _this.timer = setTimeout(function () {\n            _this.props.onSingleTap(x, y);\n\n            _this.timer = null;\n          }, _this.props.delay);\n        }\n      }\n\n      _this.prevTouchInfo = {\n        prevTouchX: gestureState.x0,\n        prevTouchY: gestureState.y0,\n        prevTouchTimeStamp: currentTouchTimeStamp\n      };\n    };\n\n    _this.gestureHandlers = PanResponder.create({\n      onStartShouldSetPanResponder: function onStartShouldSetPanResponder(evt, gestureState) {\n        return gestureState.numberActiveTouches === 1;\n      },\n      onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(evt, gestureState) {\n        return gestureState.numberActiveTouches === 1;\n      },\n      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(evt, gestureState) {\n        return false;\n      },\n      onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(evt, gestureState) {\n        return false;\n      },\n      onPanResponderTerminationRequest: function onPanResponderTerminationRequest(evt, gestureState) {\n        return false;\n      },\n      onPanResponderRelease: _this.handlePanResponderRelease\n    });\n    _this.prevTouchInfo = {\n      prevTouchX: 0,\n      prevTouchY: 0,\n      prevTouchTimeStamp: 0\n    };\n    _this.timer = null;\n    return _this;\n  }\n\n  _createClass(DoubleTapView, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, _extends({}, this.props, this.gestureHandlers.panHandlers, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }\n      }), this.props.children);\n    }\n  }]);\n\n  return DoubleTapView;\n}(Component);\n\nDoubleTapView.propTypes = _objectSpread(_objectSpread({}, ViewPropTypes), {}, {\n  delay: PropTypes.number,\n  radius: PropTypes.number,\n  onSingleTap: PropTypes.func,\n  onDoubleTap: PropTypes.func\n});\nDoubleTapView.defaultProps = {\n  delay: 300,\n  radius: 50,\n  onSingleTap: function onSingleTap() {},\n  onDoubleTap: function onDoubleTap() {}\n};\nexport { DoubleTapView as default };","map":{"version":3,"sources":["C:/Users/onurk/Desktop/NEW_DEBIS/node_modules/react-native-pdf/DoubleTapView.js"],"names":["React","Component","ViewPropTypes","PropTypes","DoubleTapView","distance","x0","y0","x1","y1","Math","sqrt","pow","toFixed","isDoubleTap","currentTouchTimeStamp","prevTouchInfo","prevTouchX","prevTouchY","prevTouchTimeStamp","dt","props","delay","radius","handlePanResponderRelease","evt","gestureState","Date","now","x","nativeEvent","locationX","y","locationY","timer","clearTimeout","onDoubleTap","onSingleTap","dx","dy","setTimeout","gestureHandlers","PanResponder","create","onStartShouldSetPanResponder","numberActiveTouches","onStartShouldSetResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetResponderCapture","onPanResponderTerminationRequest","onPanResponderRelease","panHandlers","children","propTypes","number","func","defaultProps"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Wonday (@wonday.org)\n * All rights reserved.\n *\n * This source code is licensed under the MIT-style license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\nimport React, {Component} from 'react';\nimport {\n    View,\n    PanResponder,\n    ViewPropTypes,\n} from 'react-native';\nimport PropTypes from 'prop-types';\n\nexport default class DoubleTapView extends Component {\n\n    static propTypes = {\n        ...ViewPropTypes,\n        delay: PropTypes.number,\n        radius: PropTypes.number,\n        onSingleTap: PropTypes.func,\n        onDoubleTap: PropTypes.func,\n    };\n\n    static defaultProps = {\n        delay: 300,\n        radius: 50,\n        onSingleTap: () => {\n        },\n        onDoubleTap: () => {\n        },\n    };\n\n    constructor() {\n        super();\n\n        this.gestureHandlers = PanResponder.create({\n            onStartShouldSetPanResponder: (evt, gestureState) => (gestureState.numberActiveTouches === 1),\n            onStartShouldSetResponderCapture: (evt, gestureState) => (gestureState.numberActiveTouches === 1),\n            onMoveShouldSetPanResponder: (evt, gestureState) => (false),\n            onMoveShouldSetResponderCapture: (evt, gestureState) => (false),\n            onPanResponderTerminationRequest: (evt, gestureState) => false,\n            onPanResponderRelease: this.handlePanResponderRelease,\n\n        });\n\n        this.prevTouchInfo = {\n            prevTouchX: 0,\n            prevTouchY: 0,\n            prevTouchTimeStamp: 0,\n        };\n\n        this.timer = null;\n\n    }\n\n\n    distance = (x0, y0, x1, y1) => {\n        return Math.sqrt(Math.pow((x1 - x0), 2) + Math.pow((y1 - y0), 2)).toFixed(1);\n    };\n\n    isDoubleTap = (currentTouchTimeStamp, {x0, y0}) => {\n        const {prevTouchX, prevTouchY, prevTouchTimeStamp} = this.prevTouchInfo;\n        const dt = currentTouchTimeStamp - prevTouchTimeStamp;\n        const {delay, radius} = this.props;\n\n        return (prevTouchTimeStamp > 0 && dt < delay && this.distance(prevTouchX, prevTouchY, x0, y0) < radius);\n    };\n\n    handlePanResponderRelease = (evt, gestureState) => {\n\n        const currentTouchTimeStamp = Date.now();\n        const x = evt.nativeEvent.locationX;\n        const y = evt.nativeEvent.locationY; \n\n        if (this.timer) {\n\n            if (this.isDoubleTap(currentTouchTimeStamp, gestureState)) {\n\n                clearTimeout(this.timer);\n                this.timer = null;\n                this.props.onDoubleTap();\n\n            } else {\n\n                const {prevTouchX, prevTouchY, prevTouchTimeStamp} = this.prevTouchInfo;\n                const {radius} = this.props;\n\n                // if not in radius, it's a move\n                if (this.distance(prevTouchX, prevTouchY, gestureState.x0, gestureState.y0) < radius) {\n                    this.timer = null;\n                    this.props.onSingleTap(x, y);\n                }\n\n            }\n        } else {\n            // do not count scroll gestures as taps\n            if (this.distance(0, gestureState.dx, 0, gestureState.dy) < 10) {\n\n                this.timer = setTimeout(() => {\n                    this.props.onSingleTap(x, y);\n                    this.timer = null;\n                }, this.props.delay);\n            }\n        }\n\n\n        this.prevTouchInfo = {\n            prevTouchX: gestureState.x0,\n            prevTouchY: gestureState.y0,\n            prevTouchTimeStamp: currentTouchTimeStamp,\n        };\n\n    };\n\n    render() {\n        return (\n            <View {...this.props} {...this.gestureHandlers.panHandlers}>\n                {this.props.children}\n            </View>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}