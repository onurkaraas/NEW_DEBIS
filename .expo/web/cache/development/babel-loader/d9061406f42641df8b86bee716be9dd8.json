{"ast":null,"code":"'use strict';\n\nimport Pressability from \"./Pressability\";\nimport { useEffect, useRef } from 'react';\nexport default function usePressability(config) {\n  var pressabilityRef = useRef(null);\n\n  if (pressabilityRef.current == null) {\n    pressabilityRef.current = new Pressability(config);\n  }\n\n  var pressability = pressabilityRef.current;\n  useEffect(function () {\n    pressability.configure(config);\n  }, [config, pressability]);\n  useEffect(function () {\n    return function () {\n      pressability.reset();\n    };\n  }, [pressability]);\n  return pressability.getEventHandlers();\n}","map":{"version":3,"sources":["C:/Users/onurk/Desktop/NEW_DEBIS/node_modules/react-native/Libraries/Pressability/usePressability.js"],"names":["Pressability","useEffect","useRef","usePressability","config","pressabilityRef","current","pressability","configure","reset","getEventHandlers"],"mappings":"AAUA;;AAEA,OAAOA,YAAP;AAIA,SAAQC,SAAR,EAAmBC,MAAnB,QAAgC,OAAhC;AAEA,eAAe,SAASC,eAAT,CACbC,MADa,EAEE;AACf,MAAMC,eAAe,GAAGH,MAAM,CAAgB,IAAhB,CAA9B;;AACA,MAAIG,eAAe,CAACC,OAAhB,IAA2B,IAA/B,EAAqC;AACnCD,IAAAA,eAAe,CAACC,OAAhB,GAA0B,IAAIN,YAAJ,CAAiBI,MAAjB,CAA1B;AACD;;AACD,MAAMG,YAAY,GAAGF,eAAe,CAACC,OAArC;AAIAL,EAAAA,SAAS,CAAC,YAAM;AACdM,IAAAA,YAAY,CAACC,SAAb,CAAuBJ,MAAvB;AACD,GAFQ,EAEN,CAACA,MAAD,EAASG,YAAT,CAFM,CAAT;AAMAN,EAAAA,SAAS,CAAC,YAAM;AACd,WAAO,YAAM;AACXM,MAAAA,YAAY,CAACE,KAAb;AACD,KAFD;AAGD,GAJQ,EAIN,CAACF,YAAD,CAJM,CAAT;AAMA,SAAOA,YAAY,CAACG,gBAAb,EAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport Pressability, {\n  type EventHandlers,\n  type PressabilityConfig,\n} from './Pressability';\nimport {useEffect, useRef} from 'react';\n\nexport default function usePressability(\n  config: PressabilityConfig,\n): EventHandlers {\n  const pressabilityRef = useRef<?Pressability>(null);\n  if (pressabilityRef.current == null) {\n    pressabilityRef.current = new Pressability(config);\n  }\n  const pressability = pressabilityRef.current;\n\n  // On the initial mount, this is a no-op. On updates, `pressability` will be\n  // re-configured to use the new configuration.\n  useEffect(() => {\n    pressability.configure(config);\n  }, [config, pressability]);\n\n  // On unmount, reset pending state and timers inside `pressability`. This is\n  // a separate effect because we do not want to reset when `config` changes.\n  useEffect(() => {\n    return () => {\n      pressability.reset();\n    };\n  }, [pressability]);\n\n  return pressability.getEventHandlers();\n}\n"]},"metadata":{},"sourceType":"module"}