{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\onurk\\\\Desktop\\\\NEW_DEBIS\\\\node_modules\\\\react-native\\\\Libraries\\\\Components\\\\Pressable\\\\Pressable.js\";\nvar _excluded = [\"accessible\", \"android_disableSound\", \"android_ripple\", \"children\", \"delayLongPress\", \"disabled\", \"focusable\", \"onLongPress\", \"onPress\", \"onPressIn\", \"onPressOut\", \"pressRetentionOffset\", \"style\", \"testOnly_pressed\"];\nimport * as React from 'react';\nimport { useMemo, useState, useRef, useImperativeHandle } from 'react';\nimport useAndroidRippleForView from \"./useAndroidRippleForView\";\nimport { PressabilityDebugView } from \"../../Pressability/PressabilityDebug\";\nimport usePressability from \"../../Pressability/usePressability\";\nimport { normalizeRect } from \"../../StyleSheet/Rect\";\nimport View from \"../View/View\";\n\nfunction Pressable(props, forwardedRef) {\n  var accessible = props.accessible,\n      android_disableSound = props.android_disableSound,\n      android_ripple = props.android_ripple,\n      children = props.children,\n      delayLongPress = props.delayLongPress,\n      disabled = props.disabled,\n      focusable = props.focusable,\n      onLongPress = props.onLongPress,\n      onPress = props.onPress,\n      _onPressIn = props.onPressIn,\n      _onPressOut = props.onPressOut,\n      pressRetentionOffset = props.pressRetentionOffset,\n      style = props.style,\n      testOnly_pressed = props.testOnly_pressed,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var viewRef = useRef(null);\n  useImperativeHandle(forwardedRef, function () {\n    return viewRef.current;\n  });\n  var android_rippleConfig = useAndroidRippleForView(android_ripple, viewRef);\n\n  var _usePressState = usePressState(testOnly_pressed === true),\n      _usePressState2 = _slicedToArray(_usePressState, 2),\n      pressed = _usePressState2[0],\n      setPressed = _usePressState2[1];\n\n  var hitSlop = normalizeRect(props.hitSlop);\n  var config = useMemo(function () {\n    return {\n      disabled: disabled,\n      hitSlop: hitSlop,\n      pressRectOffset: pressRetentionOffset,\n      android_disableSound: android_disableSound,\n      delayLongPress: delayLongPress,\n      onLongPress: onLongPress,\n      onPress: onPress,\n      onPressIn: function onPressIn(event) {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressIn(event);\n        }\n\n        setPressed(true);\n\n        if (_onPressIn != null) {\n          _onPressIn(event);\n        }\n      },\n      onPressMove: android_rippleConfig == null ? void 0 : android_rippleConfig.onPressMove,\n      onPressOut: function onPressOut(event) {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressOut(event);\n        }\n\n        setPressed(false);\n\n        if (_onPressOut != null) {\n          _onPressOut(event);\n        }\n      }\n    };\n  }, [android_disableSound, android_rippleConfig, delayLongPress, disabled, hitSlop, onLongPress, onPress, _onPressIn, _onPressOut, pressRetentionOffset, setPressed]);\n  var eventHandlers = usePressability(config);\n  return React.createElement(View, _extends({}, restProps, eventHandlers, android_rippleConfig == null ? void 0 : android_rippleConfig.viewProps, {\n    accessible: accessible !== false,\n    focusable: focusable !== false,\n    hitSlop: hitSlop,\n    ref: viewRef,\n    style: typeof style === 'function' ? style({\n      pressed: pressed\n    }) : style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 5\n    }\n  }), typeof children === 'function' ? children({\n    pressed: pressed\n  }) : children, __DEV__ ? React.createElement(PressabilityDebugView, {\n    color: \"red\",\n    hitSlop: hitSlop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 18\n    }\n  }) : null);\n}\n\nfunction usePressState(forcePressed) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      pressed = _useState2[0],\n      setPressed = _useState2[1];\n\n  return [pressed || forcePressed, setPressed];\n}\n\nvar MemoedPressable = React.memo(React.forwardRef(Pressable));\nMemoedPressable.displayName = 'Pressable';\nexport default MemoedPressable;","map":{"version":3,"sources":["C:/Users/onurk/Desktop/NEW_DEBIS/node_modules/react-native/Libraries/Components/Pressable/Pressable.js"],"names":["React","useMemo","useState","useRef","useImperativeHandle","useAndroidRippleForView","PressabilityDebugView","usePressability","normalizeRect","View","Pressable","props","forwardedRef","accessible","android_disableSound","android_ripple","children","delayLongPress","disabled","focusable","onLongPress","onPress","onPressIn","onPressOut","pressRetentionOffset","style","testOnly_pressed","restProps","viewRef","current","android_rippleConfig","usePressState","pressed","setPressed","hitSlop","config","pressRectOffset","event","onPressMove","eventHandlers","viewProps","__DEV__","forcePressed","MemoedPressable","memo","forwardRef","displayName"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport * as React from 'react';\nimport {useMemo, useState, useRef, useImperativeHandle} from 'react';\nimport useAndroidRippleForView, {\n  type RippleConfig,\n} from './useAndroidRippleForView';\nimport type {\n  AccessibilityActionEvent,\n  AccessibilityActionInfo,\n  AccessibilityRole,\n  AccessibilityState,\n  AccessibilityValue,\n} from '../View/ViewAccessibility';\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport usePressability from '../../Pressability/usePressability';\nimport {normalizeRect, type RectOrSize} from '../../StyleSheet/Rect';\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\nimport type {LayoutEvent, PressEvent} from '../../Types/CoreEventTypes';\nimport View from '../View/View';\n\ntype ViewStyleProp = $ElementType<React.ElementConfig<typeof View>, 'style'>;\n\nexport type StateCallbackType = $ReadOnly<{|\n  pressed: boolean,\n|}>;\n\ntype Props = $ReadOnly<{|\n  /**\n   * Accessibility.\n   */\n  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,\n  accessibilityElementsHidden?: ?boolean,\n  accessibilityHint?: ?Stringish,\n  accessibilityIgnoresInvertColors?: ?boolean,\n  accessibilityLabel?: ?Stringish,\n  accessibilityLiveRegion?: ?('none' | 'polite' | 'assertive'),\n  accessibilityRole?: ?AccessibilityRole,\n  accessibilityState?: ?AccessibilityState,\n  accessibilityValue?: ?AccessibilityValue,\n  accessibilityViewIsModal?: ?boolean,\n  accessible?: ?boolean,\n  focusable?: ?boolean,\n  importantForAccessibility?: ?('auto' | 'yes' | 'no' | 'no-hide-descendants'),\n  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,\n\n  /**\n   * Either children or a render prop that receives a boolean reflecting whether\n   * the component is currently pressed.\n   */\n  children: React.Node | ((state: StateCallbackType) => React.Node),\n\n  /**\n   * Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.\n   */\n  delayLongPress?: ?number,\n\n  /**\n   * Whether the press behavior is disabled.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Additional distance outside of this view in which a press is detected.\n   */\n  hitSlop?: ?RectOrSize,\n\n  /**\n   * Additional distance outside of this view in which a touch is considered a\n   * press before `onPressOut` is triggered.\n   */\n  pressRetentionOffset?: ?RectOrSize,\n\n  /**\n   * Called when this view's layout changes.\n   */\n  onLayout?: ?(event: LayoutEvent) => void,\n\n  /**\n   * Called when a long-tap gesture is detected.\n   */\n  onLongPress?: ?(event: PressEvent) => void,\n\n  /**\n   * Called when a single tap gesture is detected.\n   */\n  onPress?: ?(event: PressEvent) => void,\n\n  /**\n   * Called when a touch is engaged before `onPress`.\n   */\n  onPressIn?: ?(event: PressEvent) => void,\n\n  /**\n   * Called when a touch is released before `onPress`.\n   */\n  onPressOut?: ?(event: PressEvent) => void,\n\n  /**\n   * Either view styles or a function that receives a boolean reflecting whether\n   * the component is currently pressed and returns view styles.\n   */\n  style?: ViewStyleProp | ((state: StateCallbackType) => ViewStyleProp),\n\n  /**\n   * Identifier used to find this view in tests.\n   */\n  testID?: ?string,\n\n  /**\n   * If true, doesn't play system sound on touch.\n   */\n  android_disableSound?: ?boolean,\n\n  /**\n   * Enables the Android ripple effect and configures its color.\n   */\n  android_ripple?: ?RippleConfig,\n\n  /**\n   * Used only for documentation or testing (e.g. snapshot testing).\n   */\n  testOnly_pressed?: ?boolean,\n|}>;\n\n/**\n * Component used to build display components that should respond to whether the\n * component is currently pressed or not.\n */\nfunction Pressable(props: Props, forwardedRef): React.Node {\n  const {\n    accessible,\n    android_disableSound,\n    android_ripple,\n    children,\n    delayLongPress,\n    disabled,\n    focusable,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n    pressRetentionOffset,\n    style,\n    testOnly_pressed,\n    ...restProps\n  } = props;\n\n  const viewRef = useRef<React.ElementRef<typeof View> | null>(null);\n  useImperativeHandle(forwardedRef, () => viewRef.current);\n\n  const android_rippleConfig = useAndroidRippleForView(android_ripple, viewRef);\n\n  const [pressed, setPressed] = usePressState(testOnly_pressed === true);\n\n  const hitSlop = normalizeRect(props.hitSlop);\n\n  const config = useMemo(\n    () => ({\n      disabled,\n      hitSlop,\n      pressRectOffset: pressRetentionOffset,\n      android_disableSound,\n      delayLongPress,\n      onLongPress,\n      onPress,\n      onPressIn(event: PressEvent): void {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressIn(event);\n        }\n        setPressed(true);\n        if (onPressIn != null) {\n          onPressIn(event);\n        }\n      },\n      onPressMove: android_rippleConfig?.onPressMove,\n      onPressOut(event: PressEvent): void {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressOut(event);\n        }\n        setPressed(false);\n        if (onPressOut != null) {\n          onPressOut(event);\n        }\n      },\n    }),\n    [\n      android_disableSound,\n      android_rippleConfig,\n      delayLongPress,\n      disabled,\n      hitSlop,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      pressRetentionOffset,\n      setPressed,\n    ],\n  );\n  const eventHandlers = usePressability(config);\n\n  return (\n    <View\n      {...restProps}\n      {...eventHandlers}\n      {...android_rippleConfig?.viewProps}\n      accessible={accessible !== false}\n      focusable={focusable !== false}\n      hitSlop={hitSlop}\n      ref={viewRef}\n      style={typeof style === 'function' ? style({pressed}) : style}>\n      {typeof children === 'function' ? children({pressed}) : children}\n      {__DEV__ ? <PressabilityDebugView color=\"red\" hitSlop={hitSlop} /> : null}\n    </View>\n  );\n}\n\nfunction usePressState(forcePressed: boolean): [boolean, (boolean) => void] {\n  const [pressed, setPressed] = useState(false);\n  return [pressed || forcePressed, setPressed];\n}\n\nconst MemoedPressable = React.memo(React.forwardRef(Pressable));\nMemoedPressable.displayName = 'Pressable';\n\nexport default (MemoedPressable: React.AbstractComponent<\n  Props,\n  React.ElementRef<typeof View>,\n>);\n"]},"metadata":{},"sourceType":"module"}