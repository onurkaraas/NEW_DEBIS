{"ast":null,"code":"'use strict';\n\nimport invariant from 'invariant';\nimport { Commands } from \"../View/ViewNativeComponent\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport * as React from 'react';\nimport { useMemo } from 'react';\nexport default function useAndroidRippleForView(rippleConfig, viewRef) {\n  var _ref = rippleConfig != null ? rippleConfig : {},\n      color = _ref.color,\n      borderless = _ref.borderless,\n      radius = _ref.radius;\n\n  var normalizedBorderless = borderless === true;\n  return useMemo(function () {\n    if (Platform.OS === 'android' && Platform.Version >= 21 && (color != null || normalizedBorderless || radius != null)) {\n      var processedColor = processColor(color);\n      invariant(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');\n      return {\n        viewProps: {\n          nativeBackgroundAndroid: {\n            type: 'RippleAndroid',\n            color: processedColor,\n            borderless: normalizedBorderless,\n            rippleRadius: radius\n          }\n        },\n        onPressIn: function onPressIn(event) {\n          var view = viewRef.current;\n\n          if (view != null) {\n            var _event$nativeEvent$lo, _event$nativeEvent$lo2;\n\n            Commands.setPressed(view, true);\n            Commands.hotspotUpdate(view, (_event$nativeEvent$lo = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo : 0, (_event$nativeEvent$lo2 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo2 : 0);\n          }\n        },\n        onPressMove: function onPressMove(event) {\n          var view = viewRef.current;\n\n          if (view != null) {\n            var _event$nativeEvent$lo3, _event$nativeEvent$lo4;\n\n            Commands.hotspotUpdate(view, (_event$nativeEvent$lo3 = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo3 : 0, (_event$nativeEvent$lo4 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo4 : 0);\n          }\n        },\n        onPressOut: function onPressOut(event) {\n          var view = viewRef.current;\n\n          if (view != null) {\n            Commands.setPressed(view, false);\n          }\n        }\n      };\n    }\n\n    return null;\n  }, [color, normalizedBorderless, radius, viewRef]);\n}","map":{"version":3,"sources":["C:/Users/onurk/Desktop/NEW_DEBIS/node_modules/react-native/Libraries/Components/Pressable/useAndroidRippleForView.js"],"names":["invariant","Commands","React","useMemo","useAndroidRippleForView","rippleConfig","viewRef","color","borderless","radius","normalizedBorderless","Platform","OS","Version","processedColor","processColor","viewProps","nativeBackgroundAndroid","type","rippleRadius","onPressIn","event","view","current","setPressed","hotspotUpdate","nativeEvent","locationX","locationY","onPressMove","onPressOut"],"mappings":"AAUA;;AAEA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAAQC,QAAR;;;;AAIA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAAQC,OAAR,QAAsB,OAAtB;AAmBA,eAAe,SAASC,uBAAT,CACbC,YADa,EAEbC,OAFa,EAUX;AACF,aAAoCD,YAApC,WAAoCA,YAApC,GAAoD,EAApD;AAAA,MAAOE,KAAP,QAAOA,KAAP;AAAA,MAAcC,UAAd,QAAcA,UAAd;AAAA,MAA0BC,MAA1B,QAA0BA,MAA1B;;AACA,MAAMC,oBAAoB,GAAGF,UAAU,KAAK,IAA5C;AAEA,SAAOL,OAAO,CAAC,YAAM;AACnB,QACEQ,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IACAD,QAAQ,CAACE,OAAT,IAAoB,EADpB,KAECN,KAAK,IAAI,IAAT,IAAiBG,oBAAjB,IAAyCD,MAAM,IAAI,IAFpD,CADF,EAIE;AACA,UAAMK,cAAc,GAAGC,YAAY,CAACR,KAAD,CAAnC;AACAP,MAAAA,SAAS,CACPc,cAAc,IAAI,IAAlB,IAA0B,OAAOA,cAAP,KAA0B,QAD7C,EAEP,yCAFO,CAAT;AAKA,aAAO;AACLE,QAAAA,SAAS,EAAE;AAETC,UAAAA,uBAAuB,EAAE;AACvBC,YAAAA,IAAI,EAAE,eADiB;AAEvBX,YAAAA,KAAK,EAAEO,cAFgB;AAGvBN,YAAAA,UAAU,EAAEE,oBAHW;AAIvBS,YAAAA,YAAY,EAAEV;AAJS;AAFhB,SADN;AAULW,QAAAA,SAVK,qBAUKC,KAVL,EAU8B;AACjC,cAAMC,IAAI,GAAGhB,OAAO,CAACiB,OAArB;;AACA,cAAID,IAAI,IAAI,IAAZ,EAAkB;AAAA;;AAChBrB,YAAAA,QAAQ,CAACuB,UAAT,CAAoBF,IAApB,EAA0B,IAA1B;AACArB,YAAAA,QAAQ,CAACwB,aAAT,CACEH,IADF,2BAEED,KAAK,CAACK,WAAN,CAAkBC,SAFpB,oCAEiC,CAFjC,4BAGEN,KAAK,CAACK,WAAN,CAAkBE,SAHpB,qCAGiC,CAHjC;AAKD;AACF,SApBI;AAqBLC,QAAAA,WArBK,uBAqBOR,KArBP,EAqBgC;AACnC,cAAMC,IAAI,GAAGhB,OAAO,CAACiB,OAArB;;AACA,cAAID,IAAI,IAAI,IAAZ,EAAkB;AAAA;;AAChBrB,YAAAA,QAAQ,CAACwB,aAAT,CACEH,IADF,4BAEED,KAAK,CAACK,WAAN,CAAkBC,SAFpB,qCAEiC,CAFjC,4BAGEN,KAAK,CAACK,WAAN,CAAkBE,SAHpB,qCAGiC,CAHjC;AAKD;AACF,SA9BI;AA+BLE,QAAAA,UA/BK,sBA+BMT,KA/BN,EA+B+B;AAClC,cAAMC,IAAI,GAAGhB,OAAO,CAACiB,OAArB;;AACA,cAAID,IAAI,IAAI,IAAZ,EAAkB;AAChBrB,YAAAA,QAAQ,CAACuB,UAAT,CAAoBF,IAApB,EAA0B,KAA1B;AACD;AACF;AApCI,OAAP;AAsCD;;AACD,WAAO,IAAP;AACD,GApDa,EAoDX,CAACf,KAAD,EAAQG,oBAAR,EAA8BD,MAA9B,EAAsCH,OAAtC,CApDW,CAAd;AAqDD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport invariant from 'invariant';\nimport {Commands} from '../View/ViewNativeComponent';\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\nimport type {PressEvent} from '../../Types/CoreEventTypes';\nimport {Platform, View, processColor} from 'react-native';\nimport * as React from 'react';\nimport {useMemo} from 'react';\n\ntype NativeBackgroundProp = $ReadOnly<{|\n  type: 'RippleAndroid',\n  color: ?number,\n  borderless: boolean,\n  rippleRadius: ?number,\n|}>;\n\nexport type RippleConfig = {|\n  color?: ?ColorValue,\n  borderless?: ?boolean,\n  radius?: ?number,\n|};\n\n/**\n * Provides the event handlers and props for configuring the ripple effect on\n * supported versions of Android.\n */\nexport default function useAndroidRippleForView(\n  rippleConfig: ?RippleConfig,\n  viewRef: {|current: null | React.ElementRef<typeof View>|},\n): ?$ReadOnly<{|\n  onPressIn: (event: PressEvent) => void,\n  onPressMove: (event: PressEvent) => void,\n  onPressOut: (event: PressEvent) => void,\n  viewProps: $ReadOnly<{|\n    nativeBackgroundAndroid: NativeBackgroundProp,\n  |}>,\n|}> {\n  const {color, borderless, radius} = rippleConfig ?? {};\n  const normalizedBorderless = borderless === true;\n\n  return useMemo(() => {\n    if (\n      Platform.OS === 'android' &&\n      Platform.Version >= 21 &&\n      (color != null || normalizedBorderless || radius != null)\n    ) {\n      const processedColor = processColor(color);\n      invariant(\n        processedColor == null || typeof processedColor === 'number',\n        'Unexpected color given for Ripple color',\n      );\n\n      return {\n        viewProps: {\n          // Consider supporting `nativeForegroundAndroid`\n          nativeBackgroundAndroid: {\n            type: 'RippleAndroid',\n            color: processedColor,\n            borderless: normalizedBorderless,\n            rippleRadius: radius,\n          },\n        },\n        onPressIn(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.setPressed(view, true);\n            Commands.hotspotUpdate(\n              view,\n              event.nativeEvent.locationX ?? 0,\n              event.nativeEvent.locationY ?? 0,\n            );\n          }\n        },\n        onPressMove(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.hotspotUpdate(\n              view,\n              event.nativeEvent.locationX ?? 0,\n              event.nativeEvent.locationY ?? 0,\n            );\n          }\n        },\n        onPressOut(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.setPressed(view, false);\n          }\n        },\n      };\n    }\n    return null;\n  }, [color, normalizedBorderless, radius, viewRef]);\n}\n"]},"metadata":{},"sourceType":"module"}