{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\onurk\\\\Desktop\\\\NEW_DEBIS\\\\node_modules\\\\react-native-pdf\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { ProgressBar } from '@react-native-community/progress-bar-android';\nimport { ProgressView } from '@react-native-community/progress-view';\nvar RNFetchBlob;\n\ntry {\n  RNFetchBlob = require('rn-fetch-blob').default;\n} catch (e) {\n  RNFetchBlob = {\n    fs: {\n      dirs: {\n        CacheDir: ''\n      }\n    }\n  };\n}\n\nvar SHA1 = require('crypto-js/sha1');\n\nimport PdfView from \"./PdfView\";\n\nvar Pdf = function (_Component) {\n  _inherits(Pdf, _Component);\n\n  var _super = _createSuper(Pdf);\n\n  function Pdf(props) {\n    var _this;\n\n    _classCallCheck(this, Pdf);\n\n    _this = _super.call(this, props);\n\n    _this._loadFromSource = function (newSource) {\n      var source = Image.resolveAssetSource(newSource) || {};\n      var uri = source.uri || '';\n\n      if (_this._mounted) {\n        _this.setState({\n          isDownloaded: false,\n          path: '',\n          progress: 0\n        });\n      }\n\n      var cacheFile = RNFetchBlob.fs.dirs.CacheDir + '/' + SHA1(uri) + '.pdf';\n\n      if (source.cache) {\n        RNFetchBlob.fs.stat(cacheFile).then(function (stats) {\n          if (!Boolean(source.expiration) || source.expiration * 1000 + stats.lastModified > new Date().getTime()) {\n            if (_this._mounted) {\n              _this.setState({\n                path: cacheFile,\n                isDownloaded: true\n              });\n            }\n          } else {\n            _this._prepareFile(source);\n          }\n        }).catch(function () {\n          _this._prepareFile(source);\n        });\n      } else {\n        _this._prepareFile(source);\n      }\n    };\n\n    _this._prepareFile = function _callee3(source) {\n      var uri, isNetwork, isAsset, isBase64, cacheFile, data;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              try {\n                if (source.uri) {\n                  uri = source.uri || '';\n                  isNetwork = !!(uri && uri.match(/^https?:\\/\\//));\n                  isAsset = !!(uri && uri.match(/^bundle-assets:\\/\\//));\n                  isBase64 = !!(uri && uri.match(/^data:application\\/pdf;base64/));\n                  cacheFile = RNFetchBlob.fs.dirs.CacheDir + '/' + SHA1(uri) + '.pdf';\n\n                  _this._unlinkFile(cacheFile);\n\n                  if (isNetwork) {\n                    _this._downloadFile(source, cacheFile);\n                  } else if (isAsset) {\n                    RNFetchBlob.fs.cp(uri, cacheFile).then(function () {\n                      if (_this._mounted) {\n                        _this.setState({\n                          path: cacheFile,\n                          isDownloaded: true,\n                          progress: 1\n                        });\n                      }\n                    }).catch(function _callee(error) {\n                      return _regeneratorRuntime.async(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              _this._unlinkFile(cacheFile);\n\n                              _this._onError(error);\n\n                            case 2:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, null, null, null, Promise);\n                    });\n                  } else if (isBase64) {\n                    data = uri.replace(/data:application\\/pdf;base64,/i, '');\n                    RNFetchBlob.fs.writeFile(cacheFile, data, 'base64').then(function () {\n                      if (_this._mounted) {\n                        _this.setState({\n                          path: cacheFile,\n                          isDownloaded: true,\n                          progress: 1\n                        });\n                      }\n                    }).catch(function _callee2(error) {\n                      return _regeneratorRuntime.async(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              _this._unlinkFile(cacheFile);\n\n                              _this._onError(error);\n\n                            case 2:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, null, null, null, Promise);\n                    });\n                  } else {\n                    if (_this._mounted) {\n                      _this.setState({\n                        path: uri.replace(/file:\\/\\//i, ''),\n                        isDownloaded: true\n                      });\n                    }\n                  }\n                } else {\n                  _this._onError(new Error('no pdf source!'));\n                }\n              } catch (e) {\n                _this._onError(e);\n              }\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this._downloadFile = function _callee7(source, cacheFile) {\n      var tempCacheFile;\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (_this.lastRNBFTask) {\n                _this.lastRNBFTask.cancel(function (err) {});\n\n                _this.lastRNBFTask = null;\n              }\n\n              tempCacheFile = cacheFile + '.tmp';\n\n              _this._unlinkFile(tempCacheFile);\n\n              _this.lastRNBFTask = RNFetchBlob.config({\n                path: tempCacheFile,\n                trusty: _this.props.trustAllCerts\n              }).fetch(source.method ? source.method : 'GET', source.uri, source.headers ? source.headers : {}, source.body ? source.body : \"\").progress(function (received, total) {\n                _this.props.onLoadProgress && _this.props.onLoadProgress(received / total);\n\n                if (_this._mounted) {\n                  _this.setState({\n                    progress: received / total\n                  });\n                }\n              });\n\n              _this.lastRNBFTask.then(function _callee5(res) {\n                var expectedContentLength, actualContentLength, fileStats;\n                return _regeneratorRuntime.async(function _callee5$(_context5) {\n                  while (1) {\n                    switch (_context5.prev = _context5.next) {\n                      case 0:\n                        _this.lastRNBFTask = null;\n\n                        if (!(res && res.respInfo && res.respInfo.headers && !res.respInfo.headers[\"Content-Encoding\"] && !res.respInfo.headers[\"Transfer-Encoding\"] && res.respInfo.headers[\"Content-Length\"])) {\n                          _context5.next = 17;\n                          break;\n                        }\n\n                        expectedContentLength = res.respInfo.headers[\"Content-Length\"];\n                        _context5.prev = 3;\n                        _context5.next = 6;\n                        return _regeneratorRuntime.awrap(RNFetchBlob.fs.stat(res.path()));\n\n                      case 6:\n                        fileStats = _context5.sent;\n\n                        if (!(!fileStats || !fileStats.size)) {\n                          _context5.next = 9;\n                          break;\n                        }\n\n                        throw new Error(\"FileNotFound:\" + source.uri);\n\n                      case 9:\n                        actualContentLength = fileStats.size;\n                        _context5.next = 15;\n                        break;\n\n                      case 12:\n                        _context5.prev = 12;\n                        _context5.t0 = _context5[\"catch\"](3);\n                        throw new Error(\"DownloadFailed:\" + source.uri);\n\n                      case 15:\n                        if (!(expectedContentLength != actualContentLength)) {\n                          _context5.next = 17;\n                          break;\n                        }\n\n                        throw new Error(\"DownloadFailed:\" + source.uri);\n\n                      case 17:\n                        _this._unlinkFile(cacheFile);\n\n                        RNFetchBlob.fs.cp(tempCacheFile, cacheFile).then(function () {\n                          if (_this._mounted) {\n                            _this.setState({\n                              path: cacheFile,\n                              isDownloaded: true,\n                              progress: 1\n                            });\n                          }\n\n                          _this._unlinkFile(tempCacheFile);\n                        }).catch(function _callee4(error) {\n                          return _regeneratorRuntime.async(function _callee4$(_context4) {\n                            while (1) {\n                              switch (_context4.prev = _context4.next) {\n                                case 0:\n                                  throw error;\n\n                                case 1:\n                                case \"end\":\n                                  return _context4.stop();\n                              }\n                            }\n                          }, null, null, null, Promise);\n                        });\n\n                      case 19:\n                      case \"end\":\n                        return _context5.stop();\n                    }\n                  }\n                }, null, null, [[3, 12]], Promise);\n              }).catch(function _callee6(error) {\n                return _regeneratorRuntime.async(function _callee6$(_context6) {\n                  while (1) {\n                    switch (_context6.prev = _context6.next) {\n                      case 0:\n                        _this._unlinkFile(tempCacheFile);\n\n                        _this._unlinkFile(cacheFile);\n\n                        _this._onError(error);\n\n                      case 3:\n                      case \"end\":\n                        return _context6.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              });\n\n            case 5:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this._unlinkFile = function _callee8(file) {\n      return _regeneratorRuntime.async(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.prev = 0;\n              _context8.next = 3;\n              return _regeneratorRuntime.awrap(RNFetchBlob.fs.unlink(file));\n\n            case 3:\n              _context8.next = 7;\n              break;\n\n            case 5:\n              _context8.prev = 5;\n              _context8.t0 = _context8[\"catch\"](0);\n\n            case 7:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, [[0, 5]], Promise);\n    };\n\n    _this.setNativeProps = function (nativeProps) {\n      if (_this._root) {\n        _this._root.setNativeProps(nativeProps);\n      }\n    };\n\n    _this._onChange = function (event) {\n      var message = event.nativeEvent.message.split('|');\n\n      if (message.length > 0) {\n        if (message.length > 5) {\n          message[4] = message.splice(4).join('|');\n        }\n\n        if (message[0] === 'loadComplete') {\n          _this.props.onLoadComplete && _this.props.onLoadComplete(Number(message[1]), _this.state.path, {\n            width: Number(message[2]),\n            height: Number(message[3])\n          }, message[4] && JSON.parse(message[4]));\n        } else if (message[0] === 'pageChanged') {\n          _this.props.onPageChanged && _this.props.onPageChanged(Number(message[1]), Number(message[2]));\n        } else if (message[0] === 'error') {\n          _this._onError(new Error(message[1]));\n        } else if (message[0] === 'pageSingleTap') {\n          _this.props.onPageSingleTap && _this.props.onPageSingleTap(Number(message[1]), Number(message[2]), Number(message[3]));\n        } else if (message[0] === 'scaleChanged') {\n          _this.props.onScaleChanged && _this.props.onScaleChanged(Number(message[1]));\n        } else if (message[0] === 'linkPressed') {\n          _this.props.onPressLink && _this.props.onPressLink(message[1]);\n        }\n      }\n    };\n\n    _this._onError = function (error) {\n      _this.props.onError && _this.props.onError(error);\n    };\n\n    _this.state = {\n      path: '',\n      isDownloaded: false,\n      progress: 0,\n      isSupportPDFKit: -1\n    };\n    _this.lastRNBFTask = null;\n    return _this;\n  }\n\n  _createClass(Pdf, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      var nextSource = Image.resolveAssetSource(this.props.source);\n      var curSource = Image.resolveAssetSource(prevProps.source);\n\n      if (nextSource.uri !== curSource.uri) {\n        if (this.lastRNBFTask) {\n          this.lastRNBFTask.cancel(function (err) {\n            _this2._loadFromSource(_this2.props.source);\n          });\n          this.lastRNBFTask = null;\n        } else {\n          this._loadFromSource(this.props.source);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      this._mounted = true;\n\n      if (Platform.OS === \"ios\") {\n        var PdfViewManagerNative = require('react-native').NativeModules.PdfViewManager;\n\n        PdfViewManagerNative.supportPDFKit(function (isSupportPDFKit) {\n          if (_this3._mounted) {\n            _this3.setState({\n              isSupportPDFKit: isSupportPDFKit ? 1 : 0\n            });\n          }\n        });\n      }\n\n      this._loadFromSource(this.props.source);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._mounted = false;\n\n      if (this.lastRNBFTask) {\n        this.lastRNBFTask.cancel(function (err) {});\n        this.lastRNBFTask = null;\n      }\n    }\n  }, {\n    key: \"setPage\",\n    value: function setPage(pageNumber) {\n      if (pageNumber === null || isNaN(pageNumber)) {\n        throw new Error('Specified pageNumber is not a number');\n      }\n\n      this.setNativeProps({\n        page: pageNumber\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      if (Platform.OS === \"android\" || Platform.OS === \"ios\" || Platform.OS === \"windows\") {\n        return React.createElement(View, {\n          style: [this.props.style, {\n            overflow: 'hidden'\n          }],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 21\n          }\n        }, !this.state.isDownloaded ? React.createElement(View, {\n          style: styles.progressContainer,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 30\n          }\n        }, this.props.activityIndicator ? this.props.activityIndicator : Platform.OS === 'android' ? React.createElement(ProgressBar, _extends({\n          progress: this.state.progress,\n          indeterminate: false,\n          styleAttr: \"Horizontal\",\n          style: styles.progressBar\n        }, this.props.activityIndicatorProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 43\n          }\n        })) : React.createElement(ProgressView, _extends({\n          progress: this.state.progress,\n          style: styles.progressBar\n        }, this.props.activityIndicatorProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 43\n          }\n        }))) : Platform.OS === \"android\" || Platform.OS === \"windows\" ? React.createElement(PdfCustom, _extends({\n          ref: function ref(component) {\n            return _this4._root = component;\n          }\n        }, this.props, {\n          style: [{\n            flex: 1,\n            backgroundColor: '#EEE'\n          }, this.props.style],\n          path: this.state.path,\n          onChange: this._onChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 41\n          }\n        })) : this.props.usePDFKit && this.state.isSupportPDFKit === 1 ? React.createElement(PdfCustom, _extends({\n          ref: function ref(component) {\n            return _this4._root = component;\n          }\n        }, this.props, {\n          style: [{\n            backgroundColor: '#EEE',\n            overflow: 'hidden'\n          }, this.props.style],\n          path: this.state.path,\n          onChange: this._onChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 49\n          }\n        })) : React.createElement(PdfView, _extends({}, this.props, {\n          style: [{\n            backgroundColor: '#EEE',\n            overflow: 'hidden'\n          }, this.props.style],\n          path: this.state.path,\n          onLoadComplete: this.props.onLoadComplete,\n          onPageChanged: this.props.onPageChanged,\n          onError: this._onError,\n          onPageSingleTap: this.props.onPageSingleTap,\n          onScaleChanged: this.props.onScaleChanged,\n          onPressLink: this.props.onPressLink,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 48\n          }\n        })));\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return Pdf;\n}(Component);\n\nPdf.propTypes = _objectSpread(_objectSpread({}, ViewPropTypes), {}, {\n  source: PropTypes.oneOfType([PropTypes.shape({\n    uri: PropTypes.string,\n    cache: PropTypes.bool,\n    expiration: PropTypes.number\n  }), PropTypes.number]).isRequired,\n  page: PropTypes.number,\n  scale: PropTypes.number,\n  minScale: PropTypes.number,\n  maxScale: PropTypes.number,\n  horizontal: PropTypes.bool,\n  spacing: PropTypes.number,\n  password: PropTypes.string,\n  progressBarColor: PropTypes.string,\n  activityIndicator: PropTypes.any,\n  activityIndicatorProps: PropTypes.any,\n  enableAntialiasing: PropTypes.bool,\n  enableAnnotationRendering: PropTypes.bool,\n  enablePaging: PropTypes.bool,\n  enableRTL: PropTypes.bool,\n  fitPolicy: PropTypes.number,\n  trustAllCerts: PropTypes.bool,\n  singlePage: PropTypes.bool,\n  onLoadComplete: PropTypes.func,\n  onPageChanged: PropTypes.func,\n  onError: PropTypes.func,\n  onPageSingleTap: PropTypes.func,\n  onScaleChanged: PropTypes.func,\n  onPressLink: PropTypes.func,\n  accessibilityLabel: PropTypes.string,\n  importantForAccessibility: PropTypes.string,\n  renderToHardwareTextureAndroid: PropTypes.string,\n  testID: PropTypes.string,\n  onLayout: PropTypes.bool,\n  accessibilityLiveRegion: PropTypes.string,\n  accessibilityComponentType: PropTypes.string\n});\nPdf.defaultProps = {\n  password: \"\",\n  scale: 1,\n  minScale: 1,\n  maxScale: 3,\n  spacing: 10,\n  fitPolicy: 2,\n  horizontal: false,\n  page: 1,\n  enableAntialiasing: true,\n  enableAnnotationRendering: true,\n  enablePaging: false,\n  enableRTL: false,\n  activityIndicatorProps: {\n    color: '#009900',\n    progressTintColor: '#009900'\n  },\n  trustAllCerts: true,\n  usePDFKit: true,\n  singlePage: false,\n  onLoadProgress: function onLoadProgress(percent) {},\n  onLoadComplete: function onLoadComplete(numberOfPages, path) {},\n  onPageChanged: function onPageChanged(page, numberOfPages) {},\n  onError: function onError(error) {},\n  onPageSingleTap: function onPageSingleTap(page, x, y) {},\n  onScaleChanged: function onScaleChanged(scale) {},\n  onPressLink: function onPressLink(url) {}\n};\nexport { Pdf as default };\n\nif (Platform.OS === \"android\") {\n  var PdfCustom = requireNativeComponent('RCTPdf', Pdf, {\n    nativeOnly: {\n      path: true,\n      onChange: true\n    }\n  });\n} else if (Platform.OS === \"ios\") {\n  var PdfCustom = requireNativeComponent('RCTPdfView', Pdf, {\n    nativeOnly: {\n      path: true,\n      onChange: true\n    }\n  });\n} else if (Platform.OS === \"windows\") {\n  var PdfCustom = requireNativeComponent('RCTPdf', Pdf, {\n    nativeOnly: {\n      path: true,\n      onChange: true\n    }\n  });\n}\n\nvar styles = StyleSheet.create({\n  progressContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  progressBar: {\n    width: 200,\n    height: 2\n  }\n});","map":{"version":3,"sources":["C:/Users/onurk/Desktop/NEW_DEBIS/node_modules/react-native-pdf/index.js"],"names":["React","Component","PropTypes","requireNativeComponent","ViewPropTypes","ProgressBar","ProgressView","RNFetchBlob","require","default","e","fs","dirs","CacheDir","SHA1","PdfView","Pdf","props","_loadFromSource","newSource","source","Image","resolveAssetSource","uri","_mounted","setState","isDownloaded","path","progress","cacheFile","cache","stat","then","stats","Boolean","expiration","lastModified","Date","getTime","_prepareFile","catch","isNetwork","match","isAsset","isBase64","_unlinkFile","_downloadFile","cp","error","_onError","data","replace","writeFile","Error","lastRNBFTask","cancel","err","tempCacheFile","config","trusty","trustAllCerts","fetch","method","headers","body","received","total","onLoadProgress","res","respInfo","expectedContentLength","fileStats","size","actualContentLength","file","unlink","setNativeProps","nativeProps","_root","_onChange","event","message","nativeEvent","split","length","splice","join","onLoadComplete","Number","state","width","height","JSON","parse","onPageChanged","onPageSingleTap","onScaleChanged","onPressLink","onError","isSupportPDFKit","prevProps","nextSource","curSource","Platform","OS","PdfViewManagerNative","NativeModules","PdfViewManager","supportPDFKit","pageNumber","isNaN","page","style","overflow","styles","progressContainer","activityIndicator","progressBar","activityIndicatorProps","component","flex","backgroundColor","usePDFKit","propTypes","oneOfType","shape","string","bool","number","isRequired","scale","minScale","maxScale","horizontal","spacing","password","progressBarColor","any","enableAntialiasing","enableAnnotationRendering","enablePaging","enableRTL","fitPolicy","singlePage","func","accessibilityLabel","importantForAccessibility","renderToHardwareTextureAndroid","testID","onLayout","accessibilityLiveRegion","accessibilityComponentType","defaultProps","color","progressTintColor","percent","numberOfPages","x","y","url","PdfCustom","nativeOnly","onChange","StyleSheet","create","justifyContent","alignItems"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Wonday (@wonday.org)\n * All rights reserved.\n *\n * This source code is licensed under the MIT-style license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    requireNativeComponent,\n    View,\n    Platform,\n    ViewPropTypes,\n    StyleSheet,\n    Image\n} from 'react-native';\n\nimport { ProgressBar } from '@react-native-community/progress-bar-android'\nimport { ProgressView } from '@react-native-community/progress-view'\n\nlet RNFetchBlob;\ntry {\n    RNFetchBlob = require('rn-fetch-blob').default;\n} catch(e) {\n    // For Windows, when not using rn-fetch-blob with Windows support.\n    RNFetchBlob = {\n        fs : {\n            dirs: {\n                CacheDir: ''\n            }\n        }\n    };\n}\n\nconst SHA1 = require('crypto-js/sha1');\nimport PdfView from './PdfView';\n\nexport default class Pdf extends Component {\n\n    static propTypes = {\n        ...ViewPropTypes,\n        source: PropTypes.oneOfType([\n            PropTypes.shape({\n                uri: PropTypes.string,\n                cache: PropTypes.bool,\n                expiration: PropTypes.number,\n            }),\n            // Opaque type returned by require('./test.pdf')\n            PropTypes.number,\n        ]).isRequired,\n        page: PropTypes.number,\n        scale: PropTypes.number,\n        minScale: PropTypes.number,\n        maxScale: PropTypes.number,\n        horizontal: PropTypes.bool,\n        spacing: PropTypes.number,\n        password: PropTypes.string,\n        progressBarColor: PropTypes.string,\n        activityIndicator: PropTypes.any,\n        activityIndicatorProps: PropTypes.any,\n        enableAntialiasing: PropTypes.bool,\n        enableAnnotationRendering: PropTypes.bool,\n        enablePaging: PropTypes.bool,\n        enableRTL: PropTypes.bool,\n        fitPolicy: PropTypes.number,\n        trustAllCerts: PropTypes.bool,\n        singlePage: PropTypes.bool,\n        onLoadComplete: PropTypes.func,\n        onPageChanged: PropTypes.func,\n        onError: PropTypes.func,\n        onPageSingleTap: PropTypes.func,\n        onScaleChanged: PropTypes.func,\n        onPressLink: PropTypes.func,\n\n        // Props that are not available in the earlier react native version, added to prevent crashed on android\n        accessibilityLabel: PropTypes.string,\n        importantForAccessibility: PropTypes.string,\n        renderToHardwareTextureAndroid: PropTypes.string,\n        testID: PropTypes.string,\n        onLayout: PropTypes.bool,\n        accessibilityLiveRegion: PropTypes.string,\n        accessibilityComponentType: PropTypes.string,\n    };\n\n    static defaultProps = {\n        password: \"\",\n        scale: 1,\n        minScale: 1,\n        maxScale: 3,\n        spacing: 10,\n        fitPolicy: 2, //fit both\n        horizontal: false,\n        page: 1,\n        enableAntialiasing: true,\n        enableAnnotationRendering: true,\n        enablePaging: false,\n        enableRTL: false,\n        activityIndicatorProps: {color: '#009900', progressTintColor: '#009900'},\n        trustAllCerts: true,\n        usePDFKit: true,\n        singlePage: false,\n        onLoadProgress: (percent) => {\n        },\n        onLoadComplete: (numberOfPages, path) => {\n        },\n        onPageChanged: (page, numberOfPages) => {\n        },\n        onError: (error) => {\n        },\n        onPageSingleTap: (page, x, y) => {\n        },\n        onScaleChanged: (scale) => {\n        },\n        onPressLink: (url) => {\n        },\n    };\n\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            path: '',\n            isDownloaded: false,\n            progress: 0,\n            isSupportPDFKit: -1\n        };\n\n        this.lastRNBFTask = null;\n\n    }\n\n    componentDidUpdate(prevProps) {\n\n        const nextSource = Image.resolveAssetSource(this.props.source);\n        const curSource = Image.resolveAssetSource(prevProps.source);\n\n        if ((nextSource.uri !== curSource.uri)) {\n            // if has download task, then cancel it.\n            if (this.lastRNBFTask) {\n                this.lastRNBFTask.cancel(err => {\n                    this._loadFromSource(this.props.source);\n                });\n                this.lastRNBFTask = null;\n            } else {\n                this._loadFromSource(this.props.source);\n            }\n        }\n    }\n\n    componentDidMount() {\n        this._mounted = true;\n        if (Platform.OS === \"ios\") {\n            const PdfViewManagerNative = require('react-native').NativeModules.PdfViewManager;\n            PdfViewManagerNative.supportPDFKit((isSupportPDFKit) => {\n                if (this._mounted) {\n                    this.setState({isSupportPDFKit: isSupportPDFKit ? 1 : 0});\n                }\n            });\n        }\n        this._loadFromSource(this.props.source);\n    }\n\n    componentWillUnmount() {\n        this._mounted = false;\n        if (this.lastRNBFTask) {\n            this.lastRNBFTask.cancel(err => {\n            });\n            this.lastRNBFTask = null;\n        }\n\n    }\n\n    _loadFromSource = (newSource) => {\n\n        const source = Image.resolveAssetSource(newSource) || {};\n\n        let uri = source.uri || '';\n        // first set to initial state\n        if (this._mounted) {\n            this.setState({isDownloaded: false, path: '', progress: 0});\n        }\n        const cacheFile = RNFetchBlob.fs.dirs.CacheDir + '/' + SHA1(uri) + '.pdf';\n\n        if (source.cache) {\n            RNFetchBlob.fs\n                .stat(cacheFile)\n                .then(stats => {\n                    if (!Boolean(source.expiration) || (source.expiration * 1000 + stats.lastModified) > (new Date().getTime())) {\n                        if (this._mounted) {\n                            this.setState({path: cacheFile, isDownloaded: true});\n                        }\n                    } else {\n                        // cache expirated then reload it\n                        this._prepareFile(source);\n                    }\n                })\n                .catch(() => {\n                    this._prepareFile(source);\n                })\n\n        } else {\n            this._prepareFile(source);\n        }\n    };\n\n    _prepareFile = async (source) => {\n\n        try {\n            if (source.uri) {\n                let uri = source.uri || '';\n\n                const isNetwork = !!(uri && uri.match(/^https?:\\/\\//));\n                const isAsset = !!(uri && uri.match(/^bundle-assets:\\/\\//));\n                const isBase64 = !!(uri && uri.match(/^data:application\\/pdf;base64/));\n\n                const cacheFile = RNFetchBlob.fs.dirs.CacheDir + '/' + SHA1(uri) + '.pdf';\n\n                // delete old cache file\n                this._unlinkFile(cacheFile);\n\n                if (isNetwork) {\n                    this._downloadFile(source, cacheFile);\n                } else if (isAsset) {\n                    RNFetchBlob.fs\n                        .cp(uri, cacheFile)\n                        .then(() => {\n                            if (this._mounted) {\n                                this.setState({path: cacheFile, isDownloaded: true, progress: 1});\n                            }\n                        })\n                        .catch(async (error) => {\n                            this._unlinkFile(cacheFile);\n                            this._onError(error);\n                        })\n                } else if (isBase64) {\n                    let data = uri.replace(/data:application\\/pdf;base64,/i, '');\n                    RNFetchBlob.fs\n                        .writeFile(cacheFile, data, 'base64')\n                        .then(() => {\n                            if (this._mounted) {\n                                this.setState({path: cacheFile, isDownloaded: true, progress: 1});\n                            }\n                        })\n                        .catch(async (error) => {\n                            this._unlinkFile(cacheFile);\n                            this._onError(error)\n                        });\n                } else {\n                    if (this._mounted) {\n                       this.setState({\n                            path: uri.replace(/file:\\/\\//i, ''),\n                            isDownloaded: true,\n                        });\n                    }\n                }\n            } else {\n                this._onError(new Error('no pdf source!'));\n            }\n        } catch (e) {\n            this._onError(e)\n        }\n\n\n    };\n\n    _downloadFile = async (source, cacheFile) => {\n\n        if (this.lastRNBFTask) {\n            this.lastRNBFTask.cancel(err => {\n            });\n            this.lastRNBFTask = null;\n        }\n\n        const tempCacheFile = cacheFile + '.tmp';\n        this._unlinkFile(tempCacheFile);\n\n        this.lastRNBFTask = RNFetchBlob.config({\n            // response data will be saved to this path if it has access right.\n            path: tempCacheFile,\n            trusty: this.props.trustAllCerts,\n        })\n            .fetch(\n                source.method ? source.method : 'GET',\n                source.uri,\n                source.headers ? source.headers : {},\n                source.body ? source.body : \"\"\n            )\n            // listen to download progress event\n            .progress((received, total) => {\n                this.props.onLoadProgress && this.props.onLoadProgress(received / total);\n                if (this._mounted) {\n                    this.setState({progress: received / total});\n                }\n            });\n\n        this.lastRNBFTask\n            .then(async (res) => {\n\n                this.lastRNBFTask = null;\n\n                if (res && res.respInfo && res.respInfo.headers && !res.respInfo.headers[\"Content-Encoding\"] && !res.respInfo.headers[\"Transfer-Encoding\"] && res.respInfo.headers[\"Content-Length\"]) {\n                    const expectedContentLength = res.respInfo.headers[\"Content-Length\"];\n                    let actualContentLength;\n\n                    try {\n                        const fileStats = await RNFetchBlob.fs.stat(res.path());\n\n                        if (!fileStats || !fileStats.size) {\n                            throw new Error(\"FileNotFound:\" + source.uri);\n                        }\n\n                        actualContentLength = fileStats.size;\n                    } catch (error) {\n                        throw new Error(\"DownloadFailed:\" + source.uri);\n                    }\n\n                    if (expectedContentLength != actualContentLength) {\n                        throw new Error(\"DownloadFailed:\" + source.uri);\n                    }\n                }\n\n                this._unlinkFile(cacheFile);\n                RNFetchBlob.fs\n                    .cp(tempCacheFile, cacheFile)\n                    .then(() => {\n                        if (this._mounted) {\n                            this.setState({path: cacheFile, isDownloaded: true, progress: 1});\n                        }\n                        this._unlinkFile(tempCacheFile);\n                    })\n                    .catch(async (error) => {\n                        throw error;\n                    });\n            })\n            .catch(async (error) => {\n                this._unlinkFile(tempCacheFile);\n                this._unlinkFile(cacheFile);\n                this._onError(error);\n            });\n\n    };\n\n    _unlinkFile = async (file) => {\n        try {\n            await RNFetchBlob.fs.unlink(file);\n        } catch (e) {\n\n        }\n    }\n\n    setNativeProps = nativeProps => {\n        if (this._root){\n            this._root.setNativeProps(nativeProps);\n        }\n    };\n\n    setPage( pageNumber ) {\n        if ( (pageNumber === null) || (isNaN(pageNumber)) ) {\n            throw new Error('Specified pageNumber is not a number');\n        }\n        this.setNativeProps({\n            page: pageNumber\n        });\n    }\n\n    _onChange = (event) => {\n\n        let message = event.nativeEvent.message.split('|');\n        //__DEV__ && console.log(\"onChange: \" + message);\n        if (message.length > 0) {\n            if (message.length > 5) {\n                message[4] = message.splice(4).join('|');\n            }\n            if (message[0] === 'loadComplete') {\n                this.props.onLoadComplete && this.props.onLoadComplete(Number(message[1]), this.state.path, {\n                    width: Number(message[2]),\n                    height: Number(message[3]),\n                },\n                message[4]&&JSON.parse(message[4]));\n            } else if (message[0] === 'pageChanged') {\n                this.props.onPageChanged && this.props.onPageChanged(Number(message[1]), Number(message[2]));\n            } else if (message[0] === 'error') {\n                this._onError(new Error(message[1]));\n            } else if (message[0] === 'pageSingleTap') {\n                this.props.onPageSingleTap && this.props.onPageSingleTap(Number(message[1]), Number(message[2]), Number(message[3]));\n            } else if (message[0] === 'scaleChanged') {\n                this.props.onScaleChanged && this.props.onScaleChanged(Number(message[1]));\n            } else if (message[0] === 'linkPressed') {\n                this.props.onPressLink && this.props.onPressLink(message[1]);\n            }\n        }\n\n    };\n\n    _onError = (error) => {\n\n        this.props.onError && this.props.onError(error);\n\n    };\n\n    render() {\n        if (Platform.OS === \"android\" || Platform.OS === \"ios\" || Platform.OS === \"windows\") {\n                return (\n                    <View style={[this.props.style,{overflow: 'hidden'}]}>\n                        {!this.state.isDownloaded?\n                            (<View\n                                style={styles.progressContainer}\n                            >\n                                {this.props.activityIndicator\n                                    ? this.props.activityIndicator\n                                    : Platform.OS === 'android'\n                                        ? <ProgressBar\n                                            progress={this.state.progress}\n                                            indeterminate={false}\n                                            styleAttr=\"Horizontal\"\n                                            style={styles.progressBar}\n                                            {...this.props.activityIndicatorProps}\n                                        />\n                                        : <ProgressView\n                                            progress={this.state.progress}\n                                            style={styles.progressBar}\n                                            {...this.props.activityIndicatorProps}\n                                        />}\n                            </View>):(\n                                Platform.OS === \"android\" || Platform.OS === \"windows\"?(\n                                        <PdfCustom\n                                            ref={component => (this._root = component)}\n                                            {...this.props}\n                                            style={[{flex:1,backgroundColor: '#EEE'}, this.props.style]}\n                                            path={this.state.path}\n                                            onChange={this._onChange}\n                                        />\n                                    ):(\n                                        this.props.usePDFKit && this.state.isSupportPDFKit === 1?(\n                                                <PdfCustom\n                                                    ref={component => (this._root = component)}\n                                                    {...this.props}\n                                                    style={[{backgroundColor: '#EEE',overflow: 'hidden'}, this.props.style]}\n                                                    path={this.state.path}\n                                                    onChange={this._onChange}\n                                                />\n                                            ):(<PdfView\n                                                {...this.props}\n                                                style={[{backgroundColor: '#EEE',overflow: 'hidden'}, this.props.style]}\n                                                path={this.state.path}\n                                                onLoadComplete={this.props.onLoadComplete}\n                                                onPageChanged={this.props.onPageChanged}\n                                                onError={this._onError}\n                                                onPageSingleTap={this.props.onPageSingleTap}\n                                                onScaleChanged={this.props.onScaleChanged}\n                                                onPressLink={this.props.onPressLink}\n                                            />)\n                                    )\n                                )}\n                    </View>);\n        } else {\n            return (null);\n        }\n\n\n    }\n}\n\n\nif (Platform.OS === \"android\") {\n    var PdfCustom = requireNativeComponent('RCTPdf', Pdf, {\n        nativeOnly: {path: true, onChange: true},\n    })\n} else if (Platform.OS === \"ios\") {\n    var PdfCustom = requireNativeComponent('RCTPdfView', Pdf, {\n        nativeOnly: {path: true, onChange: true},\n    })\n} else if (Platform.OS === \"windows\") {\n    var PdfCustom = requireNativeComponent('RCTPdf', Pdf, {\n        nativeOnly: {path: true, onChange: true},\n    })\n}\n\n\nconst styles = StyleSheet.create({\n    progressContainer: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    progressBar: {\n        width: 200,\n        height: 2\n    }\n});\n"]},"metadata":{},"sourceType":"module"}